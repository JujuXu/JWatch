#include <Arduino.h>
#include <Arduino_GFX_Library.h>
#include "pin_config.h"
#include <Wire.h>
#include "SensorPCF85063.hpp"
#include "Arduino_DriveBus_Library.h"

#include "HWCDC.h"
HWCDC USBSerial;

Arduino_DataBus *bus = new Arduino_ESP32SPI(LCD_DC, LCD_CS, LCD_SCK, LCD_MOSI);

Arduino_GFX *gfx = new Arduino_ST7789(bus, LCD_RST /* RST */,0 /* rotation */, true /* IPS */, LCD_WIDTH, LCD_HEIGHT, 0, 20, 0, 0);

SensorPCF85063 rtc;

// rtc strings
uint32_t rtcMillis;
char prevHourStr[4] = "";
char prevMinStr[4] = "";
char prevSecStr[4] = "";
char prevDateStr[20] = "";

// center strings
int16_t getCenteredX(const char *text, uint8_t textSize) {
  int16_t textWidth = strlen(text) * 6 * textSize;
  return (LCD_WIDTH - textWidth) / 2;
}

// touch sensor
std::shared_ptr<Arduino_IIC_DriveBus> IIC_Bus =
  std::make_shared<Arduino_HWIIC>(IIC_SDA, IIC_SCL, &Wire);

void Arduino_IIC_Touch_Interrupt(void);

std::unique_ptr<Arduino_IIC> CST816T(new Arduino_CST816x(IIC_Bus, CST816T_DEVICE_ADDRESS,
                                                         TP_RST, TP_INT, Arduino_IIC_Touch_Interrupt));

void Arduino_IIC_Touch_Interrupt(void) {
  CST816T->IIC_Interrupt_Flag = true;
}

uint32_t touchMillis;
uint32_t lastTouchMs;
uint32_t touchPressMs;
int16_t touchX_cur = -1;
int16_t touchY_cur  = -1;
uint8_t touchG_cur = 0;
bool swLP = false;

// WATCH GLOBAL PROPERTIES
uint16_t brightness = 100; // 10bits res
char strVer[] = "0.1";
//////////////////////////

// PWM Channels
uint8_t pwmCScreen = 0;

enum class Gesture : uint8_t {
  NONE,
  SWIPE_UP,
  SWIPE_DOWN,
  SWIPE_LEFT,
  SWIPE_RIGHT,
  LONGPRESS
};

struct TouchInput {
  int16_t x = -1;           // -1 si pas de contact
  int16_t y = -1;           // -1 si pas de contact
  Gesture gesture = Gesture::NONE;     // cf. enum ci-dessus
  // bool    touchDown;   // front descendant: nouveau contact détecté
  // bool    touchUp;     // front montant: contact relâché
  uint32_t timestamp;  // millis() du paquet
};

Gesture gestureFromString(String& s);
void touch(struct TouchInput &out);
void (*stateFunction)(TouchInput in);

void setup(void) {
  USBSerial.begin(115200);
  Wire.begin(IIC_SDA, IIC_SCL);
  Wire.setClock(100000);

  // rtc init
  if (!rtc.begin(Wire, PCF85063_SLAVE_ADDRESS, IIC_SDA, IIC_SCL)) {
    Serial.println("PCF8563: Initialization failed!");
    while (1) {
      delay(1000);
    }
  }
  USBSerial.println("PCF8563: RTC initialized!");

  // touch sensor init
  while (CST816T->begin() == false) {
    USBSerial.println("CST816T: Initialization failed!");
    delay(2000);
  }
  USBSerial.println("CST816T: Touch sensor initialized!");

  // CST816T->IIC_Write_Device_State(CST816T->Arduino_IIC_Touch::Device::TOUCH_DEVICE_INTERRUPT_MODE,
  //                                 CST816T->Arduino_IIC_Touch::Device_Mode::TOUCH_DEVICE_INTERRUPT_PERIODIC);

  CST816T->IIC_Write_Device_State(
    CST816T->Arduino_IIC_Touch::Device::TOUCH_DEVICE_INTERRUPT_MODE,
    CST816T->Arduino_IIC_Touch::Device_Mode::TOUCH_DEVICE_INTERRUPT_CHANGE);


  uint16_t year = 2003;
  uint8_t month = 1;
  uint8_t day = 31;
  uint8_t hour = 6;
  uint8_t minute = 30;
  uint8_t second = 30;
  rtc.setDateTime(year, month, day, hour, minute, second);

  gfx->begin();
  ledcAttachChannel(LCD_BL, 24000, 10, pwmCScreen);
  ledcWrite(LCD_BL, 101);
  // pinMode(LCD_BL, OUTPUT);
  // digitalWrite(LCD_BL, HIGH);

  startupDisplay();
  stateFunction = watch;
}

void loop() {
  stateMachine();
}

void startupDisplay() {
  gfx->fillScreen(BLACK);
  delay(200);

  char strOS[] = "JWatchOS";

  //gfx->Display_Brightness(255);
  gfx->setTextColor(CYAN);
  gfx->setTextSize(4);
  gfx->setCursor(getCenteredX(strOS,4), 100);

  for(int i = 0; i < strlen(strOS); i++) {
    gfx->print(strOS[i]);
    delay(50);
  }

  delay(1000);

  gfx->setTextSize(2);
  gfx->setTextColor(RED);
  gfx->setCursor((LCD_WIDTH-(2*6*4))/2, 140);
  gfx->print("v");
  gfx->setTextColor(CYAN);
  gfx->print(strVer);

  delay(1000);

  gfx->fillScreen(BLACK);
}

void touch(struct TouchInput& out) {
  uint32_t mil = millis();
  if (mil - touchMillis >= 20) {
    touchMillis = mil;

    if (CST816T->IIC_Interrupt_Flag) {
      CST816T->IIC_Interrupt_Flag = false;

      String g = CST816T->IIC_Read_Device_State(
        CST816T->Arduino_IIC_Touch::Status_Information::TOUCH_GESTURE_ID);
      int32_t x = CST816T->IIC_Read_Device_Value(
        CST816T->Arduino_IIC_Touch::Value_Information::TOUCH_COORDINATE_X);
      int32_t y = CST816T->IIC_Read_Device_Value(
        CST816T->Arduino_IIC_Touch::Value_Information::TOUCH_COORDINATE_Y);

      if (g == "Long Press") {
        if (swLP) {
          g = "NONE";
        } else {
          swLP = true;
        }
      } else {
        swLP = false;
      }

      out.gesture = gestureFromString(g);

      if (x >= 0 && y >= 0) {
        touchX_cur = (int16_t)x;
        touchY_cur  = (int16_t)y;

        lastTouchMs = mil;
        // USBSerial.printf("Touch X:%d Y:%d\n", touchX_cur, touchY_cur );
      }
    }

    if (mil - lastTouchMs > 80) {
      if (touchX_cur != -1 || touchY_cur  != -1) {
        touchX_cur = -1;
        touchY_cur  = -1;

        //USBSerial.printf("Touch X:%d Y:%d\n", touchX_cur, touchY_cur );
      }
    }
  }

  out.x = touchX_cur;
  out.y = touchY_cur;
  out.timestamp = mil;
  // USBSerial.printf("Touch X:%d Y:%d\n", touchX_cur, touchY_cur );
}

Gesture gestureFromString(String& s) {
  s.trim();
  s.toLowerCase();

  if (s == "none")         return Gesture::NONE;
  if (s == "swipe up")     return Gesture::SWIPE_UP;
  if (s == "swipe down")   return Gesture::SWIPE_DOWN;
  if (s == "swipe left")   return Gesture::SWIPE_LEFT;
  if (s == "swipe right")  return Gesture::SWIPE_RIGHT;
  if (s == "long press")   return Gesture::LONGPRESS;

  return Gesture::NONE;
}

void stateMachine() {
  TouchInput in;
  touch(in);

  // if (in.gesture != Gesture::NONE) {
  //   USBSerial.println("yes");
  // } else if (in.x >= 0 || in.y >= 0) {
  //   USBSerial.printf("X:%d Y:%d\n",in.x, in.y);
  // }

  if (stateFunction) {
    stateFunction(in);
  }
}

void switchScreen() {
  gfx->fillScreen(BLACK);
  gfx->setCursor(0, 0);
  USBSerial.println("yes");
}

void watch(struct TouchInput in) {
  static bool FIF = true;

  if (FIF) {
    FIF = false;
    strcpy(prevHourStr, "");
    strcpy(prevMinStr, "");
    strcpy(prevSecStr, "");
    strcpy(prevDateStr, "");

    rtcMillis = 0;
  }
  if(millis() - rtcMillis > 100) {
    rtcMillis = millis();
    RTC_DateTime datetime = rtc.getDateTime();

    char hourStr[4];
    char minStr[4];
    char secStr[4];
    char dateStr[20];
    sprintf(hourStr, "%02d",datetime.hour);
    sprintf(minStr, "%02d",datetime.minute);
    sprintf(secStr, "%02d",datetime.second);
    sprintf(dateStr, "%02d %02d %04d",datetime.day,datetime.month,datetime.year);
    
    if (strcmp(hourStr, prevHourStr) != 0) {
      gfx->fillRect(0, 0, LCD_WIDTH, 130, BLACK);
      gfx->setTextColor(CYAN);
      gfx->setTextSize(13,13,0);
      gfx->setCursor(getCenteredX(hourStr,13)+6, 10);
      gfx->print(hourStr);

      strcpy(prevHourStr, hourStr);
    }

    if (strcmp(minStr, prevMinStr) != 0) {
      gfx->fillRect(0, 120, LCD_WIDTH, 100, BLACK);
      gfx->setTextColor(CYAN);
      gfx->setTextSize(13,13,0);
      gfx->setCursor(getCenteredX(minStr,13)+6, 120);
      gfx->print(minStr);

      strcpy(prevMinStr, minStr);
    }

    if (strcmp(secStr, prevSecStr) != 0) {
      gfx->fillRect(LCD_WIDTH-40, 190, 40, 21, BLACK);
      gfx->setTextColor(RED);
      gfx->setTextSize(3,3,0);
      gfx->setCursor(LCD_WIDTH-40, 190);
      gfx->print(secStr);

      strcpy(prevSecStr, secStr);
    }

    if (strcmp(dateStr, prevDateStr) != 0) {
      gfx->fillRect(0, 260, LCD_WIDTH, 20, BLACK);
      gfx->setTextColor(CYAN);
      gfx->setTextSize(2,2,0);

      gfx->setCursor(getCenteredX(dateStr,2), 260);
      gfx->print(dateStr);
      strcpy(prevDateStr, dateStr);
    }
  }

  if (in.gesture != Gesture::NONE) {
    FIF = true;
    if (in.gesture == Gesture::LONGPRESS) {
      switchScreen();
      stateFunction = selectApps;
    }
  }
}

void selectApps(struct TouchInput in) {
  static bool FIF = true;

  if (FIF) {
    FIF = false;
    gfx->setTextColor(CYAN);
    gfx->setTextSize(2,2,0);
    gfx->setCursor(20, 20);
    gfx->println("App 1");
  } else {
    if(in.gesture != Gesture::NONE) {
      FIF = true;
      if (in.gesture == Gesture::LONGPRESS) {
        switchScreen();
        stateFunction = watch;
      }
    }
  }
}